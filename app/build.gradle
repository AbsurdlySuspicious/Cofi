plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.jaredsburrows.license'
}

def keystorePropertiesFile = rootProject.file("keystore.properties")
def keystoreProperties = new Properties()
if (keystorePropertiesFile.exists()) {
    keystoreProperties.load(new FileInputStream(keystorePropertiesFile))
}

android {
    signingConfigs {
        if (keystoreProperties.containsKey('storeFile')) {
            release {
                keyAlias keystoreProperties['keyAlias']
                keyPassword keystoreProperties['keyPassword']
                storeFile file(keystoreProperties['storeFile'])
                storePassword keystoreProperties['storePassword']
            }
        }
    }

    defaultConfig {
        applicationId "com.omelan.cofi"
        minSdkVersion 24
        targetSdkVersion 33
        compileSdkVersion 33
        versionCode 74
        versionName "1.7.4"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation": "$projectDir/schemas".toString()]
            }
        }
        resConfigs 'en', 'pl', 'it', 'de'
        manifestPlaceholders = [profileable: false]

    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig keystoreProperties.containsKey('storeFile') ?
                    signingConfigs.release : signingConfigs.debug
        }

        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }

        benchmark {
            signingConfig signingConfigs.debug
            minifyEnabled true
            manifestPlaceholders["profileable"] = true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            applicationIdSuffix ".benchmark"
            versionNameSuffix "-benchmark"
        }
    }

    flavorDimensions "version"
    productFlavors {
        instant {
            dimension "version"
            versionCode android.defaultConfig.versionCode - 1
            versionNameSuffix "-instant"
            minSdkVersion 26
        }
        full {
            dimension "version"
            versionCode android.defaultConfig.versionCode
        }
    }

    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_11
        targetCompatibility JavaVersion.VERSION_11

    }


    kotlinOptions {
        jvmTarget = "11"
    }

    composeOptions {
        kotlinCompilerExtensionVersion = "1.2.0"
    }
    packagingOptions {
        resources {
            excludes += ['META-INF/DEPENDENCIES',
                         'META-INF/LICENSE',
                         'META-INF/LICENSE.txt',
                         'META-INF/license.txt',
                         'META-INF/NOTICE',
                         'META-INF/NOTICE.txt',
                         'META-INF/notice.txt',
                         'META-INF/ASL2.0',
                         'META-INF/AL2.0',
                         'META-INF/LGPL2.1',
                         'META-INF/*.kotlin_module']
        }
    }


    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

}

licenseReport {
    generateCsvReport = false
    generateHtmlReport = false
    generateJsonReport = true
    // These options are ignored for Java projects
    copyHtmlReportToAssets = false
    copyHtmlReportToAssets = false
    copyJsonReportToAssets = true
}

configurations {
    ktlint
}

dependencies {
    ktlint("com.pinterest:ktlint:0.45.2") {
        attributes {
            attribute(Bundling.BUNDLING_ATTRIBUTE, getObjects().named(Bundling, Bundling.EXTERNAL))
        }
    }

    instantImplementation('com.google.android.gms:play-services-instantapps:18.0.1')

    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation "androidx.compose.ui:ui:1.2.0-rc03"
    // Tooling support (Previews, etc.)
    debugImplementation "androidx.compose.ui:ui-tooling:1.2.0-rc03"
    implementation "androidx.compose.ui:ui-tooling-preview:1.2.0-rc03"

    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:1.2.0-rc03"
    // Material Design
    implementation "androidx.compose.material:material:1.2.0-rc03"
    implementation "androidx.compose.material3:material3:1.0.0-alpha14"
    implementation "androidx.compose.material3:material3-window-size-class:1.0.0-alpha14"

    implementation 'com.github.KieronQuinn:MonetCompat:0.2.1'
    implementation 'androidx.palette:palette-ktx:1.0.0'
    // Navigation
    implementation "androidx.navigation:navigation-compose:2.5.0"

    // Integration with observables
    implementation "androidx.compose.runtime:runtime-livedata:1.2.0-rc03"
    // Jetpack Utils
    def accompanist_version = "0.24.10-beta"

    implementation "com.google.accompanist:accompanist-flowlayout:$accompanist_version"
    implementation "com.google.accompanist:accompanist-systemuicontroller:$accompanist_version"
    implementation "com.google.accompanist:accompanist-navigation-animation:$accompanist_version"

    implementation "androidx.datastore:datastore-preferences:1.0.0"
    implementation "androidx.activity:activity-compose:1.5.0"
    //Room
    def room_version = "2.5.0-alpha02"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"
    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:1.2.0-rc03"
    testImplementation 'junit:junit:4.13.2'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "src/**/*.kt"
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    mainClass.set("com.pinterest.ktlint.Main")
    args "-F", "src/**/*.kt"
}

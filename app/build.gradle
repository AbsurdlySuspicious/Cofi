plugins {
    id 'com.android.application'
    id 'kotlin-android'
    id 'kotlin-kapt'
    id 'com.jaredsburrows.license'
}

// Create a variable called keystorePropertiesFile, and initialize it to your
// keystore.properties file, in the rootProject folder.
def keystorePropertiesFile = rootProject.file("keystore.properties")

// Initialize a new Properties() object called keystoreProperties.
def keystoreProperties = new Properties()

// Load your keystore.properties file into the keystoreProperties object.
keystoreProperties.load(new FileInputStream(keystorePropertiesFile))


android {
    signingConfigs {
        release {
            keyAlias keystoreProperties['keyAlias']
            keyPassword keystoreProperties['keyPassword']
            storeFile file(keystoreProperties['storeFile'])
            storePassword keystoreProperties['storePassword']
        }
    }
    compileSdkVersion "android-S"

    defaultConfig {
        applicationId "com.omelan.cofi"
        minSdkVersion 23
        targetSdkVersion "S"
        versionCode 36
        versionName "1.1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
        javaCompileOptions {
            annotationProcessorOptions {
                arguments += ["room.schemaLocation":
                                      "$projectDir/schemas".toString()]
            }
        }
        resConfigs "en", "pl"

    }

    buildTypes {
        release {
            minifyEnabled true
            shrinkResources true
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }

        debug {
            debuggable true
            applicationIdSuffix ".debug"
            versionNameSuffix "-debug"
        }
    }

    flavorDimensions "version"
    productFlavors {
        instant {
            dimension "version"
            versionCode android.defaultConfig.versionCode - 1
            versionNameSuffix "-instant ($versionCode)"
            minSdkVersion 26
        }
        full {
            dimension "version"
            versionCode android.defaultConfig.versionCode
            versionNameSuffix "($versionCode)"
        }
    }

    buildFeatures {
        // Enables Jetpack Compose for this module
        compose true
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8

    }


    kotlinOptions {
        jvmTarget = "1.8"
        useIR = true
    }

    composeOptions {
        kotlinCompilerVersion "$kotlin_version"
        kotlinCompilerExtensionVersion "$compose_version"
    }

    packagingOptions {
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/license.txt'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/notice.txt'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/AL2.0'
        exclude 'META-INF/LGPL2.1'
        exclude("META-INF/*.kotlin_module")
    }

    sourceSets {
        // Adds exported schema location as test app assets.
        androidTest.assets.srcDirs += files("$projectDir/schemas".toString())
    }

}

licenseReport {
    generateCsvReport = false
    generateHtmlReport = true
    generateJsonReport = false
    // These options are ignored for Java projects
    copyHtmlReportToAssets = false
    copyHtmlReportToAssets = true
    copyJsonReportToAssets = false
}

configurations {
    ktlint
}

dependencies {
    ktlint "com.pinterest:ktlint:0.40.0"

    instantImplementation('com.google.android.gms:play-services-instantapps:17.0.0')

    implementation 'androidx.appcompat:appcompat:1.3.0'
    implementation "androidx.compose.ui:ui:$compose_version"
    // Tooling support (Previews, etc.)
    implementation "androidx.compose.ui:ui-tooling:$compose_version"
    // Foundation (Border, Background, Box, Image, Scroll, shapes, animations, etc.)
    implementation "androidx.compose.foundation:foundation:$compose_version"
    // Material Design
    implementation "androidx.compose.material:material:$compose_version"
    // Navigation
    implementation "androidx.navigation:navigation-compose:2.4.0-alpha01"
    // Integration with observables
    implementation "androidx.compose.runtime:runtime-livedata:$compose_version"
    // Jetpack Utils
    implementation 'com.google.accompanist:accompanist-insets:0.10.0'
    implementation "com.google.accompanist:accompanist-flowlayout:0.10.0"

    implementation "androidx.datastore:datastore-preferences:1.0.0-beta01"
    implementation "androidx.constraintlayout:constraintlayout-compose:1.0.0-alpha07"
    implementation "androidx.activity:activity-compose:1.3.0-alpha08"
    //Room
    def room_version = "2.3.0"

    implementation "androidx.room:room-runtime:$room_version"
    kapt "androidx.room:room-compiler:$room_version"
    implementation "androidx.room:room-ktx:$room_version"
    androidTestImplementation "androidx.room:room-testing:$room_version"

    androidTestImplementation "androidx.arch.core:core-testing:2.1.0"

    // UI Tests
    androidTestImplementation "androidx.compose.ui:ui-test-junit4:$compose_version"
    testImplementation 'junit:junit:4.13.1'
}

task ktlint(type: JavaExec, group: "verification") {
    description = "Check Kotlin code style."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "src/**/*.kt"
    // to generate report in checkstyle format prepend following args:
    // "--reporter=plain", "--reporter=checkstyle,output=${buildDir}/ktlint.xml"
    // to add a baseline to check against prepend following args:
    // "--baseline=ktlint-baseline.xml"
    // see https://github.com/pinterest/ktlint#usage for more
}
check.dependsOn ktlint

task ktlintFormat(type: JavaExec, group: "formatting") {
    description = "Fix Kotlin code style deviations."
    classpath = configurations.ktlint
    main = "com.pinterest.ktlint.Main"
    args "-F", "src/**/*.kt"
}
